# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nykhtQNevwXtI5SiQyaqebyBKZ2DLj6T
"""

import yfinance as yf
# BTC-USD
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

from datetime import datetime
end = datetime.now()
start = datetime(end.year-10, end.month, end.day)
stock = "BTC-USD" #"BTC-USD"
bit_coin_data = yf.download(stock, start, end)
bit_coin_data.head()

bit_coin_data.describe()

bit_coin_data.info()

bit_coin_data.isna().sum()

Closing_price = bit_coin_data[['Close']]
Closing_price

plt.figure(figsize=(15,5))
Closing_price['Close'].plot()
plt.xlabel('Years')
plt.ylabel('Close Price')
plt.title('Close price of Bit Coin')

1,2,3,4,5,6,7,8,9,10

MA 5 days for each value(CP) = null, null, null, null, 3, 4, 5...

(2+3+4+5+6)//5

for i in range(2015,2025):
    print(list(Closing_price.index.year).count(i))

Closing_price['MA_for_365_days'] = Closing_price['Close'].rolling(365).mean()
Closing_price['MA_for_365_days'].head()

Closing_price['MA_for_365_days'][0:365].tail()

plt.figure()
Closing_price[['Close','MA_for_365_days']].plot(figsize=(15,6))
plt.xlabel('Years')
plt.ylabel('Close Price')
plt.title('Close price of Bit Coin')

Closing_price['MA_for_100_days'] = Closing_price['Close'].rolling(100).mean()
Closing_price['MA_for_100_days'].head()
plt.figure()
Closing_price[['Close','MA_for_100_days']].plot(figsize=(15,6))
plt.xlabel('Years')
plt.ylabel('Close Price')
plt.title('Close price of Bit Coin')

# 1 to 100 ==> 101 day
# 2 to 101 (100 days) ==> 102 day
# 3 to 102 (100 days) ==> 103rd day future days close price using our model

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(Closing_price[['Close']].values)
scaled_data

scaled_data.shape

x_data = []
y_data = []

base_days = 100

for i in range(base_days,len(scaled_data)):
    x_data.append(scaled_data[i-base_days:i])
    y_data.append(scaled_data[i])

x_data, y_data = np.array(x_data), np.array(y_data)

x_data[0], y_data[0]

len_train = int(len(x_data)*0.9)
x_train = x_data[:len_train]
y_train = y_data[:len_train]

x_test = x_data[len_train:]
y_test = y_data[len_train:]

print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

from keras.models import Sequential
from keras.layers import Dense, LSTM

model = Sequential()

model.add(LSTM(128, return_sequences = True, input_shape = (x_train.shape[1],1)))

model.add(LSTM(64, return_sequences = False))

model.add(Dense(25))

model.add(Dense(1))

model.summary()

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(x_train, y_train, batch_size = 5, epochs=10)

predictions = model.predict(x_test)
predictions

inv_predictions = scaler.inverse_transform(predictions)
inv_predictions

inv_y_test = scaler.inverse_transform(y_test)

inv_predictions[:5], inv_y_test[:5]

plotting_data = pd.DataFrame({
  'original_test_data': inv_y_test.reshape(-1),
'predictions': inv_predictions.reshape(-1),
},
index = Closing_price.index[len_train+100:]
)

plotting_data.head()

plt.figure()
plotting_data.plot(figsize=(15,6))
plt.xlabel('Years')
plt.ylabel('Close Price')
plt.title('Close price of Bit Coin')

last_100 = Closing_price[['Close']].tail(100)
last_100.tail()

last_100 = scaler.fit_transform(last_100['Close'].values.reshape(-1,1)).reshape(1,-1,1)
last_100

last_100.shape

day101 = model.predict(last_100)
day101

scaler.inverse_transform(day101)

# tmr day 101 ==> past 100
#     day 102 ==> day101 + past 99 days
#     day 103 ==> day 102 + + day 101 + past 98 days

def predict_future(no_of_days, prev_100):
    future_predictions = []

    # Convert prev_100 to a NumPy array (if not already)
    prev_100 = np.array(prev_100, dtype=np.float32)

    for i in range(no_of_days):
        # Predict the next value
        next_day = model.predict(prev_100)

        # Inverse transform to get actual scale
        next_day_scaled = scaler.inverse_transform(next_day)

        # Append to the list of predictions
        future_predictions.append(next_day_scaled[0][0])

        # Update prev_100 by shifting left and adding new prediction
        prev_100 = np.roll(prev_100, shift=-1, axis=1)
        prev_100[0, -1, 0] = next_day  # Add new predicted value

    return future_predictions

last_100 = Closing_price[['Close']].tail(100).values  # Extract the last 100 prices
last_100 = scaler.transform(last_100.reshape(-1, 1)).reshape(1, 100, 1)  # Normalize and reshape

no_of_days = 10
future_results = predict_future(no_of_days, last_100)
print(future_results)

future_results = np.array(future_results).reshape(-1,1)
plt.figure()
pd.DataFrame(future_results).plot(figsize=(15,5), marker='o')
for i in range(len(future_results)):
    plt.text(i,future_results[i],int(future_results[i][0]))
plt.xlabel('Future days')
plt.ylabel('Close price')
plt.title("Future Close price of Bit coin")

model.save("Latest_bit_coin_model.keras")